---
- name: Install and Configure Jenkins and Terraform
  hosts: localhost
  become: yes
  vars:
    jenkins_home: "/var/lib/jenkins"
    jenkins_config_path : "{{ jenkins_home }}/casc_configs"
    initial_admin_password_file: "{{ jenkins_home }}/secrets/initialAdminPassword"
    jenkins_cli_jar: "/var/cache/jenkins/war/WEB-INF/jenkins-cli.jar"
    jenkins_url: "http://localhost:8080/"
    jenkins_plugins:
      - git
      - job-dsl
      - blueocean
      - configuration-as-code
    terraform_version: "1.7.4"
    terraform_install_path: "/usr/local/bin"

  tasks:
    - name: Install Java
      apt:
        name: openjdk-11-jdk
        state: present
        update_cache: yes

    - name: Install prerequisite packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Jenkins GPG key
      ansible.builtin.shell:
        cmd: curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
        creates: /usr/share/keyrings/jenkins-keyring.asc

    - name: Add Jenkins repository
      ansible.builtin.shell:
        cmd: echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
        creates: /etc/apt/sources.list.d/jenkins.list

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Jenkins
      ansible.builtin.apt:
        name: jenkins
        state: present
        update_cache: yes

    - name: Ensure Jenkins service is started
      ansible.builtin.systemd:
        name: jenkins
        state: started
        enabled: yes

    - name: Stop Jenkins service before making changes
      ansible.builtin.systemd:
        name: jenkins
        state: stopped
        enabled: yes

    - name: Jenkins Skip startUp for MI
      lineinfile:
        dest: /usr/lib/systemd/system/jenkins.service
        regexp: '^Environment="JAVA_OPTS=-Djava.awt.headless=true'
        line: 'Environment="JAVA_OPTS=-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"'
      register: result_skip_startup_wizard

    - name: Reload systemd daemon
      ansible.builtin.command:
        cmd: systemctl daemon-reload
      become: yes

    - name: Start Jenkins service
      ansible.builtin.systemd:
        name: jenkins
        state: started
        enabled: yes

    - name: Wait for Jenkins to be fully started
      ansible.builtin.uri:
        url: http://localhost:8080/login
        method: GET
        status_code: [ 200, 403 ]  # Jenkins might return 403 Forbidden if not logged in, which is still a sign of it running
        timeout: 10
      register: jenkins_response
      until: jenkins_response.status == 200 or jenkins_response.status == 403
      retries: 30
      delay: 10

    - name: Wait for Jenkins initial setup to complete
      ansible.builtin.wait_for:
        path: "{{ initial_admin_password_file }}"
        state: present
        timeout: 60

    # From here, we need the initial admin password for Jenkins CLI operations
    - name: Retrieve Jenkins initial admin password
      ansible.builtin.slurp:
        src: "{{ initial_admin_password_file }}"
      register: initial_admin_password_result

    - name: Set Jenkins initial admin password variable
      set_fact:
        initial_admin_password: "{{ initial_admin_password_result['content'] | b64decode }}"

    - name: Download Jenkins CLI jar
      get_url:
        url: "http://localhost:8080/jnlpJars/jenkins-cli.jar"
        dest: "/tmp/jenkins-cli.jar"
        mode: '0755'
      become: yes

    # Example: Install a Jenkins plugin using the CLI and the initial admin password
    - name: Install Jenkins plugins via CLI
      command: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }} -auth admin:{{ initial_admin_password }} install-plugin {{ item }} -deploy
      loop: "{{ jenkins_plugins }}"

    - name: Restart Jenkins to load the new plugins
      ansible.builtin.systemd:
        name: jenkins
        state: restarted

    - name: Ensure Jenkins Configuration as Code directory exists
      file:
        path: "{{ jenkins_config_path }}"
        state: directory
        owner: jenkins
        group: jenkins

    - name: Copy JCasC configuration to Jenkins server
      copy:
        src: "../jenkins/jenkins-casc.yaml"
        dest: "{{ jenkins_config_path }}/jenkins-casc.yaml"
        owner: jenkins
        group: jenkins
        mode: '0644'

    - name: Install unzip (required for Terraform installation)
      apt:
        name: unzip
        state: present

    - name: Download Terraform
      get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: "/tmp/terraform.zip"
        mode: '0644'

    - name: Unzip Terraform
      ansible.builtin.unarchive:
        src: "/tmp/terraform.zip"
        dest: "{{ terraform_install_path }}"
        remote_src: yes
        creates: "{{ terraform_install_path }}/terraform"

    - name: Ensure Terraform binary is executable
      file:
        path: "{{ terraform_install_path }}/terraform"
        mode: '0755'

    - name: Restart Jenkins for JCasC reload
      systemd:
        name: jenkins
        state: restarted

  handlers:
    - name: Restart Jenkins
      service:
        name: jenkins
        state: restarted
